{"version":3,"sources":["redux/phoneBook/phoneBook-selectors.js","components/Notification/Notification.js","pages/RegisterPage.js"],"names":["getFilter","state","phoneBook","filter","getAllContacts","contacts","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","getError","error","Notification","this","props","errorAuth","setTimeout","clearErrorAuth","errorPb","clearErrorPb","in","message","timeout","classNames","unmountOnExit","className","Component","connect","authSelectors","dispatch","phoneBookActions","authActions","clearError","RegisterPage","email","password","handleChange","target","value","setState","handleSubmit","e","preventDefault","onRegister","appear","isLoadingAuth","onSubmit","autoComplete","htmlFor","type","onChange","mapDispatchToProps","authOperations","register"],"mappings":"gJAAA,YAIMA,EAAY,SAAAC,GAAK,OAAIA,EAAMC,UAAUC,QAErCC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,UAAUG,UA2B1CC,EAAY,CACdC,WAhCe,SAAAN,GAAK,OAAIA,EAAMC,UAAUM,SAiCxCR,YACAS,mBAduBC,YACvB,CAACN,EAAgBJ,IACjB,SAACK,EAAUF,GACN,IAAMQ,EAAmBR,EAAOS,cAErC,OAAOP,EAASF,QAAO,qBAAGU,KACjBD,cAAcE,SAASH,SAShCP,iBACAW,SA9Ba,SAAAd,GAAK,OAAIA,EAAMC,UAAUc,QAiC3BV,O,6IC/BTW,E,mLAUoB,IAAD,OACZC,KAAKC,MAAMC,UACZC,YAAW,WACP,EAAKF,MAAMG,eAAe,EAAKrB,SAChC,MAGAiB,KAAKC,MAAMI,SACdF,YAAW,WACP,EAAKF,MAAMK,aAAa,EAAKvB,SAC9B,Q,+BAMP,OACI,cAAC,IAAD,CACAwB,GAAIP,KAAKC,MAAMO,QACfC,QAAS,IACTC,WAAW,oBACXC,eAAa,EAJb,SAMJ,qBAAKC,UAAU,UAAf,SACA,mBAAGA,UAAU,eAAb,SACKZ,KAAKC,MAAMO,kB,GAnCGK,aAqDZC,iBAVS,SAAC/B,GAAD,MAAY,CAChCsB,QAASjB,IAAUS,SAASd,GAC5BmB,UAAWa,IAAclB,SAASd,OAGX,SAAAiC,GAAQ,MAAK,CACpCV,aAAc,kBAAMU,EAASC,QAC7Bb,eAAgB,kBAAMY,EAASE,IAAYC,kBAGhCL,CAA6Cf,I,yKCtDtDqB,E,4MAMJrC,MAAQ,CACNY,KAAM,GACN0B,MAAO,GACPC,SAAU,I,EAGZC,aAAe,YAAkC,IAAD,IAA9BC,OAAU7B,EAAoB,EAApBA,KAAM8B,EAAc,EAAdA,MAChC,EAAKC,SAAL,eAAiB/B,EAAO8B,K,EAG1BE,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAK5B,MAAM6B,WAAW,EAAK/C,OAE3B,EAAK2C,SAAS,CAAE/B,KAAM,GAAI0B,MAAO,GAAIC,SAAU,M,uDAGvC,IAAD,EAC2BtB,KAAKjB,MAA/BY,EADD,EACCA,KAAM0B,EADP,EACOA,MAAOC,EADd,EACcA,SAErB,OACE,gCACM,cAAC,IAAD,CACCf,IAAI,EACJwB,QAAQ,EACRtB,QAAS,IACTC,WAAW,gBACXC,eAAa,EALd,SAOC,oBAAIC,UAAU,QAAd,+BAGJ,cAAC,IAAD,CACGJ,QAASR,KAAKC,MAAMH,QAGvBE,KAAKC,MAAM+B,eAAiB,cAAC,IAAD,IAE7B,uBACEC,SAAUjC,KAAK2B,aACff,UAAU,OACVsB,aAAa,MAHf,UAKE,uBACEC,QAAQ,OACRvB,UAAU,QAFZ,kBAIA,uBACEA,UAAU,QACRwB,KAAK,OACLzC,KAAK,OACL8B,MAAO9B,EACP0C,SAAUrC,KAAKuB,eAGnB,uBACEY,QAAQ,QACRvB,UAAU,QAFZ,mBAIA,uBACEA,UAAU,QACVwB,KAAK,QACLzC,KAAK,QACL8B,MAAOJ,EACPgB,SAAUrC,KAAKuB,eAIjB,uBACEY,QAAQ,WACRvB,UAAU,QAFZ,sBAIE,uBACEA,UAAU,QACVwB,KAAK,WACLzC,KAAK,WACL8B,MAAOH,EACPe,SAAUrC,KAAKuB,eAInB,wBACEX,UAAU,SACVwB,KAAK,SAFP,+B,GAxFiBvB,aAsGrByB,EAAqB,CACzBR,WAAYS,IAAeC,UAGd1B,uBATS,SAAC/B,GAAD,MAAY,CAClCe,MAAOiB,IAAclB,SAASd,GAC9BiD,cAAejB,IAAc1B,WAAWN,MAOFuD,EAAzBxB,CAA6CM","file":"static/js/6.a7031f9a.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.phoneBook.loading;\n\nconst getFilter = state => state.phoneBook.filter;\n\nconst getAllContacts = state => state.phoneBook.contacts;\n\nconst getError = state => state.phoneBook.error;\n\n//Без мемоизации\n// const getVisibleContacts = state => {\n//     const contacts = getAllContacts(state);\n//     const filter = getFilter(state);\n//     const normalizedFilter = filter.toLowerCase();\n\n//     return contacts.filter(({ name }) =>\n//         name.toLowerCase().includes(normalizedFilter),\n//     );\n// };\n\n//С мемоизацией\nconst getVisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n    (contacts, filter) => { \n         const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter),\n    );\n    },\n);\n\nconst selectors = {\n    getLoading,\n    getFilter,\n    getVisibleContacts,\n    getAllContacts,\n    getError\n};\n\nexport default selectors;","import React, { Component } from 'react';\nimport * as phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { CSSTransition } from 'react-transition-group';\nimport './Notification.scss';\nimport selectors from '../../redux/phoneBook/phoneBook-selectors';\nimport authSelectors from '../../redux/auth/auth-selectors';\nimport authActions from '../../redux/auth/auth-actions';\n\nclass Notification extends Component {\n    static propTypes = {\n        message: PropTypes.string,\n        errorPb: PropTypes.object,\n        errorAuth: PropTypes.string,\n        clearErrorPb: PropTypes.func,\n        clearErrorPAuth: PropTypes.func\n    };\n   \n   \n    componentDidUpdate() {\n         if (this.props.errorAuth) {\n            setTimeout(() => {\n                this.props.clearErrorAuth(this.state);\n            }, 2500);\n             return;\n        }\n           if (this.props.errorPb) {\n            setTimeout(() => {\n                this.props.clearErrorPb(this.state);\n            }, 2500);\n             return;\n        }\n    }\n    \n    render() {\n        return (\n            <CSSTransition\n            in={this.props.message}\n            timeout={250}\n            classNames=\"Notification-fade\"\n            unmountOnExit>\n            \n        <div className=\"Overlay\">\n        <p className=\"Notification\">\n            {this.props.message}\n        </p>\n        </div>\n        </CSSTransition>\n        );\n    };\n}\n\nconst mapStateToProps = (state) => ({\n    errorPb: selectors.getError(state),\n    errorAuth: authSelectors.getError(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    clearErrorPb: () => dispatch(phoneBookActions.clearError()),\n    clearErrorAuth: () => dispatch(authActions.clearError())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Notification);\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport authOperations from '../redux/auth/auth-operations';\nimport { CSSTransition } from 'react-transition-group';\nimport authSelectors from '../redux/auth/auth-selectors';\nimport Notification from '../components/Notification/Notification';\nimport Spinner from '../components/Spinner/Spinner';\n\nclass RegisterPage extends Component {\n   static propTypes = {\n     error: PropTypes.string,\n     isLoadingAuth: PropTypes.bool,\n  };\n\n  state = {\n    name: '',\n    email: '',\n    password: ''\n  };\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onRegister(this.state);\n\n    this.setState({ name: '', email: '', password: '' });\n  };\n\n  render() {\n    const { name, email, password } = this.state;\n\n    return (\n      <div>\n            <CSSTransition\n             in={true}\n             appear={true}\n             timeout={500}\n             classNames=\"Title-SlideIn\"\n             unmountOnExit\n             >\n             <h1 className=\"Title\">Enter your data</h1>\n         </CSSTransition>\n\n         <Notification\n            message={this.props.error}\n        />\n        \n        {this.props.isLoadingAuth && <Spinner />}\n\n        <form\n          onSubmit={this.handleSubmit}\n          className=\"Form\"\n          autoComplete=\"off\"\n        >\n          <label\n            htmlFor=\"name\"\n            className=\"Label\">\n            Name</label>\n          <input\n            className=\"Input\"\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              onChange={this.handleChange}\n            />\n\n          <label\n            htmlFor=\"email\"\n            className=\"Label\">\n            Email</label>\n          <input\n            className=\"Input\"\n            type=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={this.handleChange}\n            />\n          \n\n          <label\n            htmlFor=\"password\"\n            className=\"Label\">\n            Password</label>\n            <input\n              className=\"Input\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n            />\n          \n\n          <button\n            className=\"Button\"\n            type=\"submit\">Sign up</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  error: authSelectors.getError(state),\n  isLoadingAuth: authSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onRegister: authOperations.register,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n\n"],"sourceRoot":""}